---- Error Matches (213 in 24 files) ----
core_cm3.h (Libraries\CMSIS) line 30 :  *   - Error 10: \n
core_cm3.h (Libraries\CMSIS) line 32 :  *     Error 10: Expecting ';'
core_cm3.h (Libraries\CMSIS) line 34 :  *   - Error 530: \n
core_cm3.h (Libraries\CMSIS) line 38 :  *   - Error 550: \n
core_cm3.h (Libraries\CMSIS) line 42 :  *   - Error 754: \n
core_cm3.h (Libraries\CMSIS) line 46 :  *   - Error 750: \n
core_cm3.h (Libraries\CMSIS) line 50 :  *   - Error 528: \n
core_cm3.h (Libraries\CMSIS) line 54 :  *   - Error 751: \n
Fire_FreeRTOS.build_log.htm (Output) line 35 : "..\..\Output\Fire_FreeRTOS.axf" - 0 Error(s), 0 Warning(s).
Fire_FreeRTOS.htm (Output) line 108 :  <LI><a href="#[4d]">prvTaskExitError</a> from port.o(.text) referenced from port.o(.text)
Fire_FreeRTOS.htm (Output) line 1413 : <BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
Fire_FreeRTOS.htm (Output) line 1694 : <P><STRONG><a name="[4d]"></a>prvTaskExitError</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(.text))
Fire_FreeRTOS.htm (Output) line 1695 : <BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvTaskExitError &rArr; __2printf
FreeRTOSConfig.h (User) line 84 : #define vAssertCalled(char,int) printf("Error:%s,%d\r\n",char,int)
JLinkLog.txt (Project\RVMDK) line 16 : T3360 3380:196 JLINK_SetErrorOutHandler(...) (0000ms, 2096ms total)
port.c (FreeRTOS\port\RVDS\ARM_CA9) line 208 : static void prvTaskExitError(void);
pxPortInitialiseStack in port.c (FreeRTOS\port\RVDS\ARM_CA9) :     *pxTopOfStack = (StackType_t) prvTaskExitError;      /* R14 */
port.c (FreeRTOS\port\RVDS\ARM_CA9) line 314 : static void prvTaskExitError(void)
port.c (FreeRTOS\port\RVDS\ARM_CM0) line 121 : static void prvTaskExitError(void);
pxPortInitialiseStack in port.c (FreeRTOS\port\RVDS\ARM_CM0) :     *pxTopOfStack = (StackType_t) prvTaskExitError;      /* LR */
port.c (FreeRTOS\port\RVDS\ARM_CM0) line 146 : static void prvTaskExitError(void)
port.c (FreeRTOS\port\RVDS\ARM_CM3) line 174 : static void prvTaskExitError(void);
pxPortInitialiseStack in port.c (FreeRTOS\port\RVDS\ARM_CM3) :     *pxTopOfStack = (StackType_t) prvTaskExitError;      /* LR */
port.c (FreeRTOS\port\RVDS\ARM_CM3) line 236 : static void prvTaskExitError(void)
port.c (FreeRTOS\port\RVDS\ARM_CM4F) line 190 : static void prvTaskExitError(void);
pxPortInitialiseStack in port.c (FreeRTOS\port\RVDS\ARM_CM4F) :     *pxTopOfStack = (StackType_t) prvTaskExitError;      /* LR */
port.c (FreeRTOS\port\RVDS\ARM_CM4F) line 263 : static void prvTaskExitError(void)
port.c (FreeRTOS\port\RVDS\ARM_CM7\r0p1) line 184 : static void prvTaskExitError(void);
pxPortInitialiseStack in port.c (FreeRTOS\port\RVDS\ARM_CM7\r0p1) :     *pxTopOfStack = (StackType_t) prvTaskExitError;      /* LR */
port.c (FreeRTOS\port\RVDS\ARM_CM7\r0p1) line 257 : static void prvTaskExitError(void)
queue.h (FreeRTOS\include) line 579 :         // Error unless the item was removed by a different task.
queue.h (FreeRTOS\include) line 595 :         // Error!
IRQn in stm32f10x.h (Libraries\CMSIS) :     I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                 */
IRQn in stm32f10x.h (Libraries\CMSIS) :                                   I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                 */
IRQn in stm32f10x.h (Libraries\CMSIS) :                                           I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                 */
IRQn in stm32f10x.h (Libraries\CMSIS) :                                           I2C2_ER_IRQn                = 34,     /*!< I2C2 Error Interrupt                                 */
IRQn in stm32f10x.h (Libraries\CMSIS) :                                                   I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                 */
IRQn in stm32f10x.h (Libraries\CMSIS) :                                                   I2C2_ER_IRQn                = 34,     /*!< I2C2 Error Interrupt                                 */
IRQn in stm32f10x.h (Libraries\CMSIS) :                                                           I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                 */
IRQn in stm32f10x.h (Libraries\CMSIS) :                                                           I2C2_ER_IRQn                = 34,     /*!< I2C2 Error Interrupt                                 */
IRQn in stm32f10x.h (Libraries\CMSIS) :                                                                   I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                 */
IRQn in stm32f10x.h (Libraries\CMSIS) :                                                                   I2C2_ER_IRQn                = 34,     /*!< I2C2 Error Interrupt                                 */
IRQn in stm32f10x.h (Libraries\CMSIS) :                                                                           I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                 */
IRQn in stm32f10x.h (Libraries\CMSIS) :                                                                           I2C2_ER_IRQn                = 34,     /*!< I2C2 Error Interrupt                                 */
IRQn in stm32f10x.h (Libraries\CMSIS) :                                                                                   I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                 */
IRQn in stm32f10x.h (Libraries\CMSIS) :                                                                                   I2C2_ER_IRQn                = 34,     /*!< I2C2 Error Interrupt                                 */
stm32f10x.h (Libraries\CMSIS) line 523 : typedef enum {ERROR = 0, SUCCESS = !ERROR} ErrorStatus;
stm32f10x.h (Libraries\CMSIS) line 3372 : #define  DMA_ISR_TEIF1                       ((uint32_t)0x00000008)        /*!< Channel 1 Transfer Error flag */
stm32f10x.h (Libraries\CMSIS) line 3376 : #define  DMA_ISR_TEIF2                       ((uint32_t)0x00000080)        /*!< Channel 2 Transfer Error flag */
stm32f10x.h (Libraries\CMSIS) line 3380 : #define  DMA_ISR_TEIF3                       ((uint32_t)0x00000800)        /*!< Channel 3 Transfer Error flag */
stm32f10x.h (Libraries\CMSIS) line 3384 : #define  DMA_ISR_TEIF4                       ((uint32_t)0x00008000)        /*!< Channel 4 Transfer Error flag */
stm32f10x.h (Libraries\CMSIS) line 3388 : #define  DMA_ISR_TEIF5                       ((uint32_t)0x00080000)        /*!< Channel 5 Transfer Error flag */
stm32f10x.h (Libraries\CMSIS) line 3392 : #define  DMA_ISR_TEIF6                       ((uint32_t)0x00800000)        /*!< Channel 6 Transfer Error flag */
stm32f10x.h (Libraries\CMSIS) line 3396 : #define  DMA_ISR_TEIF7                       ((uint32_t)0x08000000)        /*!< Channel 7 Transfer Error flag */
stm32f10x.h (Libraries\CMSIS) line 3402 : #define  DMA_IFCR_CTEIF1                     ((uint32_t)0x00000008)        /*!< Channel 1 Transfer Error clear */
stm32f10x.h (Libraries\CMSIS) line 3406 : #define  DMA_IFCR_CTEIF2                     ((uint32_t)0x00000080)        /*!< Channel 2 Transfer Error clear */
stm32f10x.h (Libraries\CMSIS) line 3410 : #define  DMA_IFCR_CTEIF3                     ((uint32_t)0x00000800)        /*!< Channel 3 Transfer Error clear */
stm32f10x.h (Libraries\CMSIS) line 3414 : #define  DMA_IFCR_CTEIF4                     ((uint32_t)0x00008000)        /*!< Channel 4 Transfer Error clear */
stm32f10x.h (Libraries\CMSIS) line 3418 : #define  DMA_IFCR_CTEIF5                     ((uint32_t)0x00080000)        /*!< Channel 5 Transfer Error clear */
stm32f10x.h (Libraries\CMSIS) line 3422 : #define  DMA_IFCR_CTEIF6                     ((uint32_t)0x00800000)        /*!< Channel 6 Transfer Error clear */
stm32f10x.h (Libraries\CMSIS) line 3426 : #define  DMA_IFCR_CTEIF7                     ((uint32_t)0x08000000)        /*!< Channel 7 Transfer Error clear */
stm32f10x.h (Libraries\CMSIS) line 4112 : #define  CEC_CFGR_BTEM            ((uint16_t)0x0004)     /*!<  Bit Timing Error Mode */
stm32f10x.h (Libraries\CMSIS) line 4113 : #define  CEC_CFGR_BPEM            ((uint16_t)0x0008)     /*!<  Bit Period Error Mode */
stm32f10x.h (Libraries\CMSIS) line 4126 : #define  CEC_ESR_BTE              ((uint16_t)0x0001)     /*!<  Bit Timing Error */
stm32f10x.h (Libraries\CMSIS) line 4127 : #define  CEC_ESR_BPE              ((uint16_t)0x0002)     /*!<  Bit Period Error */
stm32f10x.h (Libraries\CMSIS) line 4128 : #define  CEC_ESR_RBTFE            ((uint16_t)0x0004)     /*!<  Rx Block Transfer Finished Error */
stm32f10x.h (Libraries\CMSIS) line 4129 : #define  CEC_ESR_SBE              ((uint16_t)0x0008)     /*!<  Start Bit Error */
stm32f10x.h (Libraries\CMSIS) line 4130 : #define  CEC_ESR_ACKE             ((uint16_t)0x0010)     /*!<  Block Acknowledge Error */
stm32f10x.h (Libraries\CMSIS) line 4131 : #define  CEC_ESR_LINE             ((uint16_t)0x0020)     /*!<  Line Error */
stm32f10x.h (Libraries\CMSIS) line 4132 : #define  CEC_ESR_TBTFE            ((uint16_t)0x0040)     /*!<  Tx Block Transfer Finished Error */
stm32f10x.h (Libraries\CMSIS) line 4137 : #define  CEC_CSR_TERR             ((uint16_t)0x0004)     /*!<  Tx Error */
stm32f10x.h (Libraries\CMSIS) line 4141 : #define  CEC_CSR_RERR             ((uint16_t)0x0040)     /*!<  Rx Error */
stm32f10x.h (Libraries\CMSIS) line 5482 : #define  SDIO_MASK_TXUNDERRIE                ((uint32_t)0x00000010)        /*!< Tx FIFO UnderRun Error Interrupt Enable */
stm32f10x.h (Libraries\CMSIS) line 5483 : #define  SDIO_MASK_RXOVERRIE                 ((uint32_t)0x00000020)        /*!< Rx FIFO OverRun Error Interrupt Enable */
stm32f10x.h (Libraries\CMSIS) line 5487 : #define  SDIO_MASK_STBITERRIE                ((uint32_t)0x00000200)        /*!< Start Bit Error Interrupt Enable */
stm32f10x.h (Libraries\CMSIS) line 5720 : #define  USB_CNTR_ERRM                       ((uint16_t)0x2000)            /*!< Error Interrupt Mask */
stm32f10x.h (Libraries\CMSIS) line 5732 : #define  USB_ISTR_ERR                        ((uint16_t)0x2000)            /*!< Error */
stm32f10x.h (Libraries\CMSIS) line 6198 : #define  CAN_MSR_ERRI                        ((uint16_t)0x0004)            /*!< Error Interrupt */
stm32f10x.h (Libraries\CMSIS) line 6210 : #define  CAN_TSR_TERR0                       ((uint32_t)0x00000008)        /*!< Transmission Error of Mailbox0 */
stm32f10x.h (Libraries\CMSIS) line 6215 : #define  CAN_TSR_TERR1                       ((uint32_t)0x00000800)        /*!< Transmission Error of Mailbox1 */
stm32f10x.h (Libraries\CMSIS) line 6220 : #define  CAN_TSR_TERR2                       ((uint32_t)0x00080000)        /*!< Transmission Error of Mailbox 2 */
stm32f10x.h (Libraries\CMSIS) line 6254 : #define  CAN_IER_EWGIE                       ((uint32_t)0x00000100)        /*!< Error Warning Interrupt Enable */
stm32f10x.h (Libraries\CMSIS) line 6255 : #define  CAN_IER_EPVIE                       ((uint32_t)0x00000200)        /*!< Error Passive Interrupt Enable */
stm32f10x.h (Libraries\CMSIS) line 6257 : #define  CAN_IER_LECIE                       ((uint32_t)0x00000800)        /*!< Last Error Code Interrupt Enable */
stm32f10x.h (Libraries\CMSIS) line 6258 : #define  CAN_IER_ERRIE                       ((uint32_t)0x00008000)        /*!< Error Interrupt Enable */
stm32f10x.h (Libraries\CMSIS) line 6263 : #define  CAN_ESR_EWGF                        ((uint32_t)0x00000001)        /*!< Error Warning Flag */
stm32f10x.h (Libraries\CMSIS) line 6264 : #define  CAN_ESR_EPVF                        ((uint32_t)0x00000002)        /*!< Error Passive Flag */
stm32f10x.h (Libraries\CMSIS) line 6267 : #define  CAN_ESR_LEC                         ((uint32_t)0x00000070)        /*!< LEC[2:0] bits (Last Error Code) */
stm32f10x.h (Libraries\CMSIS) line 6272 : #define  CAN_ESR_TEC                         ((uint32_t)0x00FF0000)        /*!< Least significant byte of the 9-bit Transmit Error Counter */
stm32f10x.h (Libraries\CMSIS) line 6273 : #define  CAN_ESR_REC                         ((uint32_t)0xFF000000)        /*!< Receive Error Counter */
stm32f10x.h (Libraries\CMSIS) line 7457 : #define  SPI_CR2_ERRIE                       ((uint8_t)0x20)               /*!< Error Interrupt Enable */
stm32f10x.h (Libraries\CMSIS) line 7466 : #define  SPI_SR_CRCERR                       ((uint8_t)0x10)               /*!< CRC Error flag */
stm32f10x.h (Libraries\CMSIS) line 7528 : #define  I2C_CR1_PEC                         ((uint16_t)0x1000)            /*!< Packet Error Checking */
stm32f10x.h (Libraries\CMSIS) line 7541 : #define  I2C_CR2_ITERREN                     ((uint16_t)0x0100)            /*!< Error Interrupt Enable */
stm32f10x.h (Libraries\CMSIS) line 7579 : #define  I2C_SR1_BERR                        ((uint16_t)0x0100)            /*!< Bus Error */
stm32f10x.h (Libraries\CMSIS) line 7583 : #define  I2C_SR1_PECERR                      ((uint16_t)0x1000)            /*!< PEC Error in reception */
stm32f10x.h (Libraries\CMSIS) line 7584 : #define  I2C_SR1_TIMEOUT                     ((uint16_t)0x4000)            /*!< Timeout or Tlow Error */
stm32f10x.h (Libraries\CMSIS) line 7595 : #define  I2C_SR2_PEC                         ((uint16_t)0xFF00)            /*!< Packet Error Checking Register */
stm32f10x.h (Libraries\CMSIS) line 7612 : #define  USART_SR_PE                         ((uint16_t)0x0001)            /*!< Parity Error */
stm32f10x.h (Libraries\CMSIS) line 7613 : #define  USART_SR_FE                         ((uint16_t)0x0002)            /*!< Framing Error */
stm32f10x.h (Libraries\CMSIS) line 7614 : #define  USART_SR_NE                         ((uint16_t)0x0004)            /*!< Noise Error Flag */
stm32f10x.h (Libraries\CMSIS) line 7615 : #define  USART_SR_ORE                        ((uint16_t)0x0008)            /*!< OverRun Error */
stm32f10x.h (Libraries\CMSIS) line 7663 : #define  USART_CR3_EIE                       ((uint16_t)0x0001)            /*!< Error Interrupt Enable */
stm32f10x.h (Libraries\CMSIS) line 7774 : #define  FLASH_SR_PGERR                      ((uint8_t)0x04)               /*!< Programming Error */
stm32f10x.h (Libraries\CMSIS) line 7775 : #define  FLASH_SR_WRPRTERR                   ((uint8_t)0x10)               /*!< Write Protection Error */
stm32f10x.h (Libraries\CMSIS) line 7787 : #define  FLASH_CR_ERRIE                      ((uint16_t)0x0400)            /*!< Error Interrupt Enable */
stm32f10x.h (Libraries\CMSIS) line 7794 : #define  FLASH_OBR_OPTERR                    ((uint16_t)0x0001)            /*!< Option Byte Error */
stm32f10x.h (Libraries\CMSIS) line 8050 : /* Bit definition for Ethernet MMC Received Frames with CRC Error Counter Register */
stm32f10x.h (Libraries\CMSIS) line 8053 : /* Bit definition for Ethernet MMC Received Frames with Alignement Error Counter Register */
stm32f10x.h (Libraries\CMSIS) line 8157 : #define ETH_DMASR_EBS        ((uint32_t)0x03800000)  /* Error bits status */
stm32f10x.h (Libraries\CMSIS) line 8159 : #define ETH_DMASR_EBS_DescAccess      ((uint32_t)0x02000000)  /* Error bits 0-data buffer, 1-desc. access */
stm32f10x.h (Libraries\CMSIS) line 8160 : #define ETH_DMASR_EBS_ReadTransf      ((uint32_t)0x01000000)  /* Error bits 0-write trnsf, 1-read transfr */
stm32f10x.h (Libraries\CMSIS) line 8161 : #define ETH_DMASR_EBS_DataTransfTx    ((uint32_t)0x00800000)  /* Error bits 0-Rx DMA, 1-Tx DMA */
stm32f10x_can.c (Libraries\FWlib\src) line 861 :   * @retval CAN_ErrorCode: specifies the Error code :
stm32f10x_can.c (Libraries\FWlib\src) line 862 :   *                        - CAN_ERRORCODE_NoErr            No Error
stm32f10x_can.c (Libraries\FWlib\src) line 863 :   *                        - CAN_ERRORCODE_StuffErr         Stuff Error
stm32f10x_can.c (Libraries\FWlib\src) line 864 :   *                        - CAN_ERRORCODE_FormErr          Form Error
stm32f10x_can.c (Libraries\FWlib\src) line 865 :   *                        - CAN_ERRORCODE_ACKErr           Acknowledgment Error
stm32f10x_can.c (Libraries\FWlib\src) line 866 :   *                        - CAN_ERRORCODE_BitRecessiveErr  Bit Recessive Error
stm32f10x_can.c (Libraries\FWlib\src) line 867 :   *                        - CAN_ERRORCODE_BitDominantErr   Bit Dominant Error
stm32f10x_can.c (Libraries\FWlib\src) line 868 :   *                        - CAN_ERRORCODE_CRCErr           CRC Error
stm32f10x_can.c (Libraries\FWlib\src) line 869 :   *                        - CAN_ERRORCODE_SoftwareSetErr   Software Set Error
stm32f10x_can.c (Libraries\FWlib\src) line 872 : uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
stm32f10x_can.c (Libraries\FWlib\src) line 886 :   * @brief  Returns the CANx Receive Error Counter (REC).
stm32f10x_can.c (Libraries\FWlib\src) line 894 :   * @retval CAN Receive Error Counter.
stm32f10x_can.c (Libraries\FWlib\src) line 896 : uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
CAN_GetReceiveErrorCounter in stm32f10x_can.c (Libraries\FWlib\src) :     /* Get the Receive Error Counter*/
CAN_GetReceiveErrorCounter in stm32f10x_can.c (Libraries\FWlib\src) :     /* Return the Receive Error Counter*/
stm32f10x_can.c (Libraries\FWlib\src) line 912 :   * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
stm32f10x_can.c (Libraries\FWlib\src) line 914 :   * @retval LSB of the 9-bit CAN Transmit Error Counter.
stm32f10x_can.c (Libraries\FWlib\src) line 916 : uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
CAN_GetLSBTransmitErrorCounter in stm32f10x_can.c (Libraries\FWlib\src) :     /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
CAN_GetLSBTransmitErrorCounter in stm32f10x_can.c (Libraries\FWlib\src) :     /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
stm32f10x_can.h (Libraries\FWlib\inc) line 477 :   * @defgroup   CAN_Error_Code_constants
stm32f10x_can.h (Libraries\FWlib\inc) line 481 : #define CAN_ErrorCode_NoErr           ((uint8_t)0x00) /*!< No Error */
stm32f10x_can.h (Libraries\FWlib\inc) line 482 : #define CAN_ErrorCode_StuffErr        ((uint8_t)0x10) /*!< Stuff Error */
stm32f10x_can.h (Libraries\FWlib\inc) line 483 : #define CAN_ErrorCode_FormErr         ((uint8_t)0x20) /*!< Form Error */
stm32f10x_can.h (Libraries\FWlib\inc) line 484 : #define CAN_ErrorCode_ACKErr          ((uint8_t)0x30) /*!< Acknowledgment Error */
stm32f10x_can.h (Libraries\FWlib\inc) line 485 : #define CAN_ErrorCode_BitRecessiveErr ((uint8_t)0x40) /*!< Bit Recessive Error */
stm32f10x_can.h (Libraries\FWlib\inc) line 486 : #define CAN_ErrorCode_BitDominantErr  ((uint8_t)0x50) /*!< Bit Dominant Error */
stm32f10x_can.h (Libraries\FWlib\inc) line 487 : #define CAN_ErrorCode_CRCErr          ((uint8_t)0x60) /*!< CRC Error  */
stm32f10x_can.h (Libraries\FWlib\inc) line 488 : #define CAN_ErrorCode_SoftwareSetErr  ((uint8_t)0x70) /*!< Software Set Error */
stm32f10x_can.h (Libraries\FWlib\inc) line 521 : /* Error Flags */
stm32f10x_can.h (Libraries\FWlib\inc) line 522 : #define CAN_FLAG_EWG               ((uint32_t)0x10F00001) /*!< Error Warning Flag   */
stm32f10x_can.h (Libraries\FWlib\inc) line 523 : #define CAN_FLAG_EPV               ((uint32_t)0x10F00002) /*!< Error Passive Flag   */
stm32f10x_can.h (Libraries\FWlib\inc) line 566 : /* Error Interrupts */
stm32f10x_can.h (Libraries\FWlib\inc) line 567 : #define CAN_IT_EWG                  ((uint32_t)0x00000100) /*!< Error warning Interrupt*/
stm32f10x_can.h (Libraries\FWlib\inc) line 568 : #define CAN_IT_EPV                  ((uint32_t)0x00000200) /*!< Error passive Interrupt*/
stm32f10x_can.h (Libraries\FWlib\inc) line 571 : #define CAN_IT_ERR                  ((uint32_t)0x00008000) /*!< Error Interrupt*/
stm32f10x_can.h (Libraries\FWlib\inc) line 664 : /* Error management functions *************************************************/
stm32f10x_can.h (Libraries\FWlib\inc) line 665 : uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx);
stm32f10x_can.h (Libraries\FWlib\inc) line 666 : uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx);
stm32f10x_can.h (Libraries\FWlib\inc) line 667 : uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx);
CEC_Init in stm32f10x_cec.c (Libraries\FWlib\src) :     /* Configure CEC: Bit Timing Error and Bit Period Error */
stm32f10x_cec.c (Libraries\FWlib\src) line 273 :   *     @arg CEC_FLAG_BTE: Bit Timing Error
stm32f10x_cec.c (Libraries\FWlib\src) line 274 :   *     @arg CEC_FLAG_BPE: Bit Period Error
stm32f10x_cec.c (Libraries\FWlib\src) line 275 :   *     @arg CEC_FLAG_RBTFE: Rx Block Transfer Finished Error
stm32f10x_cec.c (Libraries\FWlib\src) line 276 :   *     @arg CEC_FLAG_SBE: Start Bit Error
stm32f10x_cec.c (Libraries\FWlib\src) line 277 :   *     @arg CEC_FLAG_ACKE: Block Acknowledge Error
stm32f10x_cec.c (Libraries\FWlib\src) line 278 :   *     @arg CEC_FLAG_LINE: Line Error
stm32f10x_cec.c (Libraries\FWlib\src) line 279 :   *     @arg CEC_FLAG_TBTFE: Tx Block Transfer Finished Error
stm32f10x_cec.c (Libraries\FWlib\src) line 281 :   *     @arg CEC_FLAG_TERR: Tx Error
stm32f10x_cec.c (Libraries\FWlib\src) line 285 :   *     @arg CEC_FLAG_RERR: Rx Error
stm32f10x_cec.c (Libraries\FWlib\src) line 333 :   *     @arg CEC_FLAG_TERR: Tx Error
stm32f10x_cec.c (Libraries\FWlib\src) line 337 :   *     @arg CEC_FLAG_RERR: Rx Error
stm32f10x_cec.c (Libraries\FWlib\src) line 358 :   *     @arg CEC_IT_TERR: Tx Error
stm32f10x_cec.c (Libraries\FWlib\src) line 360 :   *     @arg CEC_IT_RERR: Rx Error
stm32f10x_cec.c (Libraries\FWlib\src) line 392 :   *     @arg CEC_IT_TERR: Tx Error
stm32f10x_cec.c (Libraries\FWlib\src) line 394 :   *     @arg CEC_IT_RERR: Rx Error
{anonCEC_InitTypeDef} in stm32f10x_cec.h (Libraries\FWlib\inc) :     uint16_t CEC_BitTimingMode; /*!< Configures the CEC Bit Timing Error Mode.
{anonCEC_InitTypeDef} in stm32f10x_cec.h (Libraries\FWlib\inc) :     uint16_t CEC_BitPeriodMode; /*!< Configures the CEC Bit Period Error Mode.
stm32f10x_flash.c (Libraries\FWlib\src) line 1245 :   *     @arg FLASH_IT_ERROR: FLASH Error Interrupt
stm32f10x_fsmc.c (Libraries\FWlib\src) line 567 :   * @retval The Error Correction Code (ECC) value.
stm32f10x_i2c.c (Libraries\FWlib\src) line 517 :   *     @arg I2C_IT_ERR: Error interrupt mask
stm32f10x_i2c.c (Libraries\FWlib\src) line 980 :   * @retval An ErrorStatus enumeration value:
stm32f10x_i2c.c (Libraries\FWlib\src) line 984 : ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
I2C_CheckEvent in stm32f10x_i2c.c (Libraries\FWlib\src) :     ErrorStatus status = ERROR;
stm32f10x_i2c.h (Libraries\FWlib\inc) line 644 : ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT);
stm32f10x_rcc.c (Libraries\FWlib\src) line 300 :   * @retval An ErrorStatus enumuration value:
stm32f10x_rcc.c (Libraries\FWlib\src) line 304 : ErrorStatus RCC_WaitForHSEStartUp(void)
RCC_WaitForHSEStartUp in stm32f10x_rcc.c (Libraries\FWlib\src) :     ErrorStatus status = ERROR;
stm32f10x_rcc.h (Libraries\FWlib\inc) line 648 : ErrorStatus RCC_WaitForHSEStartUp(void);
stm32f10x_spi.c (Libraries\FWlib\src) line 451 :   *     @arg SPI_I2S_IT_ERR: Error interrupt mask
stm32f10x_spi.c (Libraries\FWlib\src) line 721 :   *     @arg SPI_FLAG_CRCERR: CRC Error flag.
stm32f10x_spi.c (Libraries\FWlib\src) line 722 :   *     @arg I2S_FLAG_UDR: Underrun Error flag.
stm32f10x_spi.c (Libraries\FWlib\src) line 747 :   * @brief  Clears the SPIx CRC Error (CRCERR) flag.
SPI_I2S_ClearFlag in stm32f10x_spi.c (Libraries\FWlib\src) :     /* Clear the selected SPI CRC Error (CRCERR) flag */
stm32f10x_spi.c (Libraries\FWlib\src) line 784 :   *     @arg SPI_IT_CRCERR: CRC Error interrupt.
stm32f10x_spi.c (Libraries\FWlib\src) line 785 :   *     @arg I2S_IT_UDR: Underrun Error interrupt.
stm32f10x_spi.c (Libraries\FWlib\src) line 823 :   * @brief  Clears the SPIx CRC Error (CRCERR) interrupt pending bit.
stm32f10x_spi.c (Libraries\FWlib\src) line 829 :   *   - OVR (OverRun Error) interrupt pending bit is cleared by software
stm32f10x_spi.c (Libraries\FWlib\src) line 832 :   *   - UDR (UnderRun Error) interrupt pending bit is cleared by a read
SPI_I2S_ClearITPendingBit in stm32f10x_spi.c (Libraries\FWlib\src) :     /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
stm32f10x_usart.c (Libraries\FWlib\src) line 362 :   *     @arg USART_IT_PE:   Parity Error interrupt
stm32f10x_usart.c (Libraries\FWlib\src) line 363 :   *     @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
stm32f10x_usart.c (Libraries\FWlib\src) line 817 :   *     @arg USART_FLAG_ORE:  OverRun Error flag
stm32f10x_usart.c (Libraries\FWlib\src) line 818 :   *     @arg USART_FLAG_NE:   Noise Error flag
stm32f10x_usart.c (Libraries\FWlib\src) line 819 :   *     @arg USART_FLAG_FE:   Framing Error flag
stm32f10x_usart.c (Libraries\FWlib\src) line 820 :   *     @arg USART_FLAG_PE:   Parity Error flag
stm32f10x_usart.c (Libraries\FWlib\src) line 897 :   *     @arg USART_IT_ORE:  OverRun Error interrupt
stm32f10x_usart.c (Libraries\FWlib\src) line 898 :   *     @arg USART_IT_NE:   Noise Error interrupt
stm32f10x_usart.c (Libraries\FWlib\src) line 899 :   *     @arg USART_IT_FE:   Framing Error interrupt
stm32f10x_usart.c (Libraries\FWlib\src) line 900 :   *     @arg USART_IT_PE:   Parity Error interrupt
